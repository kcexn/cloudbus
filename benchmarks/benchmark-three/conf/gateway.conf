# /etc/nginx/nginx.conf

# Worker processes and other global settings
# These are often fine at their defaults for a basic setup,
# but you might want to adjust them based on your server's resources.
user www-data; # Or the user Nginx should run as
worker_processes auto; # Or a specific number like number of CPU cores
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768; # Max connections per worker
    # multi_accept on; # Uncomment if you want worker processes to accept all new connections at once
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off; # Uncomment to hide Nginx version for security

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    # access_log /var/log/nginx/access.log; # Default access log
    # error_log /var/log/nginx/error.log;   # Default error log

    # Custom log format to include X-Forwarded-For
    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main_ext; # Use the custom log format
    error_log /var/log/nginx/error.log;

    # Gzip Settings (optional, for compressing responses)
    # gzip on;
    # gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define the group of backend servers
    # This is where you list your three backend application servers.
    # Nginx will distribute requests among these servers.
    # By default, it uses a round-robin load balancing method.
    upstream backend_servers {
        # Least connections is often a good choice if request processing times vary
        # least_conn;

        # Or use round-robin (default)
        # server backend1.example.com:8080; # Replace with your backend server's hostname/IP and port
        # server backend2.example.com:8080;
        # server backend3.example.com:8080;

        # Example using IP addresses:
        server server1.australia-southeast2-a; # Backend Server 1: IP and Port
        server server2.australia-southeast2-b; # Backend Server 2: IP and Port
        server server3.australia-southeast2-c; # Backend Server 3: IP and Port

        # You can also add parameters like:
        # server 10.0.0.1:8001 weight=3; # Give this server more traffic
        # server 10.0.0.2:8002 max_fails=3 fail_timeout=30s; # Health check parameters
        # server 10.0.0.3:8003 backup; # Only use this server if others are down
    }

    # The main server block that listens for incoming HTTP requests
    server {
        listen 80; # Listen on port 80 for HTTP traffic
        # listen [::]:80; # Uncomment to listen on IPv6 as well

        # Replace with your server's domain name or IP address
        # server_name your_domain.com www.your_domain.com;
        server_name _; # Listen for any hostname (catch-all) or specify your domain

        # Location block to handle all requests (/)
        location / {
            # Pass the request to the upstream group defined above
            proxy_pass http://backend_servers;

            # Set headers to pass information to the backend servers
            # These are important for applications to know the original request details
            proxy_set_header Host $host; # Preserves the original host requested by the client
            proxy_set_header X-Real-IP $remote_addr; # Passes the real IP address of the client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # List of IPs the request has passed through
            proxy_set_header X-Forwarded-Proto $scheme; # Indicates the original request protocol (http or https)

            # Optional: Adjust proxy timeouts if needed
            # proxy_connect_timeout 60s;
            # proxy_send_timeout 60s;
            # proxy_read_timeout 60s;

            # Optional: Enable proxy buffering
            # proxy_buffering on;
            # proxy_buffer_size 16k; # Size of the buffer used for reading the first part of the response from the proxied server
            # proxy_buffers 4 64k;   # Number and size of buffers used for reading a response from the proxied server
            # proxy_busy_buffers_size 128k;
        }

        # Optional: You can add specific location blocks for health checks, static files, etc.
        # location /health {
        #     access_log off; # Don't log health check access
        #     return 200 "OK";
        #     add_header Content-Type text/plain;
        # }

        # Optional: Handle specific error pages
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html; # Or your custom error page location
        # }
    }

    # You can add more server blocks here for other domains or HTTPS configuration.
    # Example for HTTPS (requires SSL certificate):
    # server {
    #     listen 443 ssl http2;
    #     # listen [::]:443 ssl http2;
    #     server_name your_domain.com www.your_domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/your_domain.com/fullchain.pem; # Path to your SSL certificate
    #     ssl_certificate_key /etc/nginx/ssl/your_domain.com/privkey.pem; # Path to your SSL private key
    #
    #     # SSL hardening (recommended)
    #     include /etc/nginx/snippets/ssl-params.conf; # Often contains recommended SSL settings
    #
    #     location / {
    #         proxy_pass http://backend_servers;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # Include other configurations if you have them in conf.d
    # include /etc/nginx/conf.d/*.conf;
}
